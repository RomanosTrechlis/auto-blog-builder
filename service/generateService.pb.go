// Code generated by protoc-gen-go. DO NOT EDIT.
// source: generateService.proto

package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GenerateRequest struct {
	Author            string         `protobuf:"bytes,1,opt,name=Author" json:"Author,omitempty"`
	BlogURL           string         `protobuf:"bytes,2,opt,name=BlogURL" json:"BlogURL,omitempty"`
	BlogLanguage      string         `protobuf:"bytes,3,opt,name=BlogLanguage" json:"BlogLanguage,omitempty"`
	BlogDescription   string         `protobuf:"bytes,4,opt,name=BlogDescription" json:"BlogDescription,omitempty"`
	DateFormat        string         `protobuf:"bytes,5,opt,name=DateFormat" json:"DateFormat,omitempty"`
	Theme             *Theme         `protobuf:"bytes,12,opt,name=Theme" json:"Theme,omitempty"`
	ThemeFolder       string         `protobuf:"bytes,6,opt,name=ThemeFolder" json:"ThemeFolder,omitempty"`
	BlogTitle         string         `protobuf:"bytes,7,opt,name=BlogTitle" json:"BlogTitle,omitempty"`
	NumPostsFrontPage int64          `protobuf:"varint,8,opt,name=NumPostsFrontPage" json:"NumPostsFrontPage,omitempty"`
	DataSource        *DataSource    `protobuf:"bytes,13,opt,name=DataSource" json:"DataSource,omitempty"`
	Upload            *Upload        `protobuf:"bytes,14,opt,name=Upload" json:"Upload,omitempty"`
	TempFolder        string         `protobuf:"bytes,9,opt,name=TempFolder" json:"TempFolder,omitempty"`
	DestFolder        string         `protobuf:"bytes,10,opt,name=DestFolder" json:"DestFolder,omitempty"`
	StaticPages       []*StaticPages `protobuf:"bytes,11,rep,name=StaticPages" json:"StaticPages,omitempty"`
}

func (m *GenerateRequest) Reset()                    { *m = GenerateRequest{} }
func (m *GenerateRequest) String() string            { return proto.CompactTextString(m) }
func (*GenerateRequest) ProtoMessage()               {}
func (*GenerateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *GenerateRequest) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *GenerateRequest) GetBlogURL() string {
	if m != nil {
		return m.BlogURL
	}
	return ""
}

func (m *GenerateRequest) GetBlogLanguage() string {
	if m != nil {
		return m.BlogLanguage
	}
	return ""
}

func (m *GenerateRequest) GetBlogDescription() string {
	if m != nil {
		return m.BlogDescription
	}
	return ""
}

func (m *GenerateRequest) GetDateFormat() string {
	if m != nil {
		return m.DateFormat
	}
	return ""
}

func (m *GenerateRequest) GetTheme() *Theme {
	if m != nil {
		return m.Theme
	}
	return nil
}

func (m *GenerateRequest) GetThemeFolder() string {
	if m != nil {
		return m.ThemeFolder
	}
	return ""
}

func (m *GenerateRequest) GetBlogTitle() string {
	if m != nil {
		return m.BlogTitle
	}
	return ""
}

func (m *GenerateRequest) GetNumPostsFrontPage() int64 {
	if m != nil {
		return m.NumPostsFrontPage
	}
	return 0
}

func (m *GenerateRequest) GetDataSource() *DataSource {
	if m != nil {
		return m.DataSource
	}
	return nil
}

func (m *GenerateRequest) GetUpload() *Upload {
	if m != nil {
		return m.Upload
	}
	return nil
}

func (m *GenerateRequest) GetTempFolder() string {
	if m != nil {
		return m.TempFolder
	}
	return ""
}

func (m *GenerateRequest) GetDestFolder() string {
	if m != nil {
		return m.DestFolder
	}
	return ""
}

func (m *GenerateRequest) GetStaticPages() []*StaticPages {
	if m != nil {
		return m.StaticPages
	}
	return nil
}

type StaticPages struct {
	File       string `protobuf:"bytes,1,opt,name=File" json:"File,omitempty"`
	To         string `protobuf:"bytes,2,opt,name=To" json:"To,omitempty"`
	IsTemplate bool   `protobuf:"varint,3,opt,name=IsTemplate" json:"IsTemplate,omitempty"`
}

func (m *StaticPages) Reset()                    { *m = StaticPages{} }
func (m *StaticPages) String() string            { return proto.CompactTextString(m) }
func (*StaticPages) ProtoMessage()               {}
func (*StaticPages) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *StaticPages) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *StaticPages) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *StaticPages) GetIsTemplate() bool {
	if m != nil {
		return m.IsTemplate
	}
	return false
}

type Theme struct {
	Repository string `protobuf:"bytes,1,opt,name=Repository" json:"Repository,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=Type" json:"Type,omitempty"`
}

func (m *Theme) Reset()                    { *m = Theme{} }
func (m *Theme) String() string            { return proto.CompactTextString(m) }
func (*Theme) ProtoMessage()               {}
func (*Theme) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Theme) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *Theme) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type DataSource struct {
	Repository string `protobuf:"bytes,1,opt,name=Repository" json:"Repository,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=Type" json:"Type,omitempty"`
}

func (m *DataSource) Reset()                    { *m = DataSource{} }
func (m *DataSource) String() string            { return proto.CompactTextString(m) }
func (*DataSource) ProtoMessage()               {}
func (*DataSource) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *DataSource) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *DataSource) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Upload struct {
	URL      string `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=Username" json:"Username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=Password" json:"Password,omitempty"`
}

func (m *Upload) Reset()                    { *m = Upload{} }
func (m *Upload) String() string            { return proto.CompactTextString(m) }
func (*Upload) ProtoMessage()               {}
func (*Upload) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *Upload) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Upload) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Upload) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type GenerateResponse struct {
	Res string `protobuf:"bytes,1,opt,name=Res" json:"Res,omitempty"`
}

func (m *GenerateResponse) Reset()                    { *m = GenerateResponse{} }
func (m *GenerateResponse) String() string            { return proto.CompactTextString(m) }
func (*GenerateResponse) ProtoMessage()               {}
func (*GenerateResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *GenerateResponse) GetRes() string {
	if m != nil {
		return m.Res
	}
	return ""
}

func init() {
	proto.RegisterType((*GenerateRequest)(nil), "service.GenerateRequest")
	proto.RegisterType((*StaticPages)(nil), "service.StaticPages")
	proto.RegisterType((*Theme)(nil), "service.Theme")
	proto.RegisterType((*DataSource)(nil), "service.DataSource")
	proto.RegisterType((*Upload)(nil), "service.Upload")
	proto.RegisterType((*GenerateResponse)(nil), "service.GenerateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Generator service

type GeneratorClient interface {
	Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
}

type generatorClient struct {
	cc *grpc.ClientConn
}

func NewGeneratorClient(cc *grpc.ClientConn) GeneratorClient {
	return &generatorClient{cc}
}

func (c *generatorClient) Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	out := new(GenerateResponse)
	err := grpc.Invoke(ctx, "/service.Generator/Generate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Generator service

type GeneratorServer interface {
	Generate(context.Context, *GenerateRequest) (*GenerateResponse, error)
}

func RegisterGeneratorServer(s *grpc.Server, srv GeneratorServer) {
	s.RegisterService(&_Generator_serviceDesc, srv)
}

func _Generator_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Generator/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServer).Generate(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Generator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Generator",
	HandlerType: (*GeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _Generator_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "generateService.proto",
}

func init() { proto.RegisterFile("generateService.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x25, 0x1f, 0xcd, 0xc7, 0xb8, 0x24, 0x65, 0xf8, 0xd0, 0x52, 0x21, 0x64, 0x59, 0x95, 0xf0,
	0x01, 0xe5, 0x90, 0x4a, 0x5c, 0xb8, 0x50, 0x54, 0x05, 0x21, 0x55, 0x55, 0xd8, 0x38, 0x3f, 0x60,
	0x49, 0x46, 0xa9, 0x25, 0xdb, 0x6b, 0x76, 0xd7, 0xa0, 0xfe, 0x16, 0xfe, 0x2c, 0xda, 0xf5, 0xda,
	0x71, 0x0b, 0x27, 0x6e, 0x33, 0xef, 0xbd, 0x79, 0x3b, 0x3b, 0x3b, 0x0b, 0x2f, 0x0f, 0x54, 0x90,
	0x12, 0x86, 0x36, 0xa4, 0x7e, 0xa6, 0x3b, 0x5a, 0x94, 0x4a, 0x1a, 0x89, 0x63, 0x5d, 0xa7, 0xd1,
	0xef, 0x21, 0xcc, 0xbf, 0x78, 0x09, 0xa7, 0x1f, 0x15, 0x69, 0x83, 0xaf, 0x60, 0x74, 0x55, 0x99,
	0x3b, 0xa9, 0x58, 0x2f, 0xec, 0xc5, 0x53, 0xee, 0x33, 0x64, 0x30, 0xfe, 0x9c, 0xc9, 0xc3, 0x96,
	0xdf, 0xb0, 0xbe, 0x23, 0x9a, 0x14, 0x23, 0x38, 0xb5, 0xe1, 0x8d, 0x28, 0x0e, 0x95, 0x38, 0x10,
	0x1b, 0x38, 0xfa, 0x01, 0x86, 0x31, 0xcc, 0x6d, 0x7e, 0x4d, 0x7a, 0xa7, 0xd2, 0xd2, 0xa4, 0xb2,
	0x60, 0x43, 0x27, 0x7b, 0x0c, 0xe3, 0x5b, 0x80, 0x6b, 0x61, 0x68, 0x25, 0x55, 0x2e, 0x0c, 0x3b,
	0x71, 0xa2, 0x0e, 0x82, 0x17, 0x70, 0x92, 0xdc, 0x51, 0x4e, 0xec, 0x34, 0xec, 0xc5, 0xc1, 0x72,
	0xb6, 0xf0, 0x97, 0x59, 0x38, 0x94, 0xd7, 0x24, 0x86, 0x10, 0xb8, 0x60, 0x25, 0xb3, 0x3d, 0x29,
	0x36, 0x72, 0x36, 0x5d, 0x08, 0xdf, 0xc0, 0xd4, 0x1e, 0x9d, 0xa4, 0x26, 0x23, 0x36, 0x76, 0xfc,
	0x11, 0xc0, 0xf7, 0xf0, 0xec, 0xb6, 0xca, 0xd7, 0x52, 0x1b, 0xbd, 0x52, 0xb2, 0x30, 0x6b, 0x7b,
	0xb1, 0x49, 0xd8, 0x8b, 0x07, 0xfc, 0x6f, 0x02, 0x2f, 0x5d, 0xcf, 0x62, 0x23, 0x2b, 0xb5, 0x23,
	0xf6, 0xd4, 0x35, 0xf6, 0xbc, 0x6d, 0xec, 0x48, 0xf1, 0x8e, 0x0c, 0xdf, 0xc1, 0x68, 0x5b, 0x66,
	0x52, 0xec, 0xd9, 0xcc, 0x15, 0xcc, 0xdb, 0x82, 0x1a, 0xe6, 0x9e, 0xb6, 0x13, 0x49, 0x28, 0x2f,
	0xfd, 0x55, 0xa6, 0xf5, 0x44, 0x8e, 0x88, 0x9b, 0x18, 0x69, 0xe3, 0x79, 0xf0, 0x13, 0x6b, 0x11,
	0xfc, 0x00, 0xc1, 0xc6, 0x08, 0x93, 0xee, 0x6c, 0xaf, 0x9a, 0x05, 0xe1, 0x20, 0x0e, 0x96, 0x2f,
	0xda, 0xd3, 0x3a, 0x1c, 0xef, 0x0a, 0xa3, 0x6f, 0x0f, 0xea, 0x10, 0x61, 0xb8, 0x4a, 0x33, 0xf2,
	0x6b, 0xe1, 0x62, 0x9c, 0x41, 0x3f, 0x91, 0x7e, 0x1f, 0xfa, 0x89, 0xb4, 0xad, 0x7c, 0xd5, 0xb6,
	0xb5, 0x4c, 0x98, 0x7a, 0x11, 0x26, 0xbc, 0x83, 0x44, 0x1f, 0xfd, 0xe3, 0x59, 0x21, 0xa7, 0x52,
	0xea, 0xd4, 0x48, 0x75, 0xef, 0x2d, 0x3b, 0x88, 0x3d, 0x2c, 0xb9, 0x2f, 0xc9, 0x5b, 0xbb, 0x38,
	0xfa, 0xd4, 0x9d, 0xf2, 0x7f, 0x39, 0xf0, 0x66, 0xe4, 0x78, 0x06, 0x03, 0xbb, 0xc9, 0x75, 0x99,
	0x0d, 0xf1, 0x1c, 0x26, 0x5b, 0x4d, 0xaa, 0x10, 0x79, 0x53, 0xd3, 0xe6, 0x96, 0x5b, 0x0b, 0xad,
	0x7f, 0x49, 0xb5, 0xf7, 0xdb, 0xdd, 0xe6, 0xd1, 0x05, 0x9c, 0x1d, 0xbf, 0x90, 0x2e, 0x65, 0xa1,
	0xc9, 0xba, 0x73, 0xd2, 0x8d, 0x3b, 0x27, 0xbd, 0xbc, 0x85, 0xa9, 0x57, 0x49, 0x85, 0x57, 0x30,
	0x69, 0x4a, 0x90, 0xb5, 0xef, 0xf0, 0xe8, 0x23, 0x9e, 0xbf, 0xfe, 0x07, 0x53, 0xfb, 0x47, 0x4f,
	0xbe, 0x8f, 0xdc, 0x4f, 0xbe, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x62, 0xaf, 0xe4, 0xe2,
	0x03, 0x00, 0x00,
}
