// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fetchService.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	fetchService.proto
	generateService.proto

It has these top-level messages:
	FetchRequest
	FetchResponse
	GenerateRequest
	StaticPages
	Theme
	DataSource
	Upload
	GenerateResponse
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FetchRequest struct {
	DsType       string `protobuf:"bytes,1,opt,name=dsType" json:"dsType,omitempty"`
	DsRepository string `protobuf:"bytes,2,opt,name=dsRepository" json:"dsRepository,omitempty"`
	DsDestFolder string `protobuf:"bytes,3,opt,name=dsDestFolder" json:"dsDestFolder,omitempty"`
}

func (m *FetchRequest) Reset()                    { *m = FetchRequest{} }
func (m *FetchRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchRequest) ProtoMessage()               {}
func (*FetchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FetchRequest) GetDsType() string {
	if m != nil {
		return m.DsType
	}
	return ""
}

func (m *FetchRequest) GetDsRepository() string {
	if m != nil {
		return m.DsRepository
	}
	return ""
}

func (m *FetchRequest) GetDsDestFolder() string {
	if m != nil {
		return m.DsDestFolder
	}
	return ""
}

type FetchResponse struct {
	Res string `protobuf:"bytes,1,opt,name=Res" json:"Res,omitempty"`
}

func (m *FetchResponse) Reset()                    { *m = FetchResponse{} }
func (m *FetchResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchResponse) ProtoMessage()               {}
func (*FetchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FetchResponse) GetRes() string {
	if m != nil {
		return m.Res
	}
	return ""
}

func init() {
	proto.RegisterType((*FetchRequest)(nil), "service.FetchRequest")
	proto.RegisterType((*FetchResponse)(nil), "service.FetchResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Fetcher service

type FetcherClient interface {
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
}

type fetcherClient struct {
	cc *grpc.ClientConn
}

func NewFetcherClient(cc *grpc.ClientConn) FetcherClient {
	return &fetcherClient{cc}
}

func (c *fetcherClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := grpc.Invoke(ctx, "/service.Fetcher/Fetch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Fetcher service

type FetcherServer interface {
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
}

func RegisterFetcherServer(s *grpc.Server, srv FetcherServer) {
	s.RegisterService(&_Fetcher_serviceDesc, srv)
}

func _Fetcher_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetcherServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Fetcher/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetcherServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fetcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Fetcher",
	HandlerType: (*FetcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _Fetcher_Fetch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fetchService.proto",
}

func init() { proto.RegisterFile("fetchService.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x4f, 0xcb, 0xaa, 0xc2, 0x30,
	0x10, 0xbd, 0xbd, 0xc5, 0x16, 0x87, 0x0a, 0x32, 0x60, 0x29, 0xae, 0x34, 0x2b, 0x57, 0x5d, 0xe8,
	0xc6, 0xbd, 0xd2, 0x0f, 0x88, 0x7e, 0x81, 0xed, 0x88, 0x05, 0x69, 0x62, 0x26, 0x0a, 0xfd, 0x7b,
	0x69, 0x12, 0xf1, 0xb1, 0x3b, 0x2f, 0xe6, 0x9c, 0x01, 0x3c, 0x93, 0xad, 0x2f, 0x07, 0x32, 0x8f,
	0xb6, 0xa6, 0x52, 0x1b, 0x65, 0x15, 0xa6, 0xec, 0xa9, 0xe8, 0x20, 0xab, 0x06, 0x5b, 0xd2, 0xed,
	0x4e, 0x6c, 0x31, 0x87, 0xa4, 0xe1, 0x63, 0xaf, 0xa9, 0x88, 0x16, 0xd1, 0x6a, 0x2c, 0x03, 0x43,
	0x01, 0x59, 0xc3, 0x92, 0xb4, 0xe2, 0xd6, 0x2a, 0xd3, 0x17, 0xff, 0xce, 0xfd, 0xd2, 0x7c, 0x66,
	0x4f, 0x6c, 0x2b, 0x75, 0x6d, 0xc8, 0x14, 0xf1, 0x2b, 0xf3, 0xd6, 0xc4, 0x12, 0x26, 0xa1, 0x8f,
	0xb5, 0xea, 0x98, 0x70, 0x0a, 0xb1, 0x24, 0x0e, 0x6d, 0x03, 0x5c, 0xef, 0x20, 0x75, 0x11, 0x32,
	0xb8, 0x85, 0x91, 0x83, 0x38, 0x2b, 0xc3, 0xe0, 0xf2, 0x73, 0xed, 0x3c, 0xff, 0x95, 0xfd, 0x51,
	0xf1, 0x77, 0x4a, 0xdc, 0x9f, 0x9b, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x61, 0x86, 0xd2, 0x1d,
	0xfd, 0x00, 0x00, 0x00,
}
